// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
	"swagger": "2.0",
	"info": {
	  "description": "{{escape .Description}}",
	  "title": "{{.Title}}",
	  "contact": {
		"name": "Masa API Support",
		"url": "https://masa.ai",
		"email": "support@masa.ai"
	  },
	  "license": {
		"name": "MIT",
		"url": "https://opensource.org/license/mit"
	  },
	  "version": "{{.Version}}"
	},
	"host": "{{.Host}}",
	"basePath": "{{.BasePath}}",
	"securityDefinitions": {
	  "Bearer": {
		"type": "apiKey",
		"name": "Authorization",
		"in": "header"
	  }
	},
	"security": [
	  {
		"Bearer": []
	  }
	],
	"paths": {
	  "/data/twitter/profile/{username}": {
		"get": {
		  "description": "Retrieves tweets from a specific Twitter profile",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "tags": ["Twitter"],
		  "summary": "Search Twitter Profile",
		  "parameters": [
			{
			  "type": "string",
			  "description": "Twitter Username",
			  "name": "username",
			  "in": "path",
			  "required": true
			}
		  ],
		  "responses": {
			"200": {
			  "description": "List of tweets from the profile",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Tweet"
				}
			  }
			},
			"400": {
			  "description": "Invalid username or error fetching tweets",
			  "schema": {
				"$ref": "#/definitions/ErrorResponse"
			  }
			}
		  },
		  "security": [
			{
			  "Bearer": []
			}
		  ]
		}
	  },
	  "/data/twitter/followers/{username}": {
		"get": {
		  "description": "Retrieves followers from a specific Twitter profile.",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "tags": ["Twitter"],
		  "summary": "Search Twitter Followers",
		  "parameters": [
			{
			  "name": "username",
			  "in": "path",
			  "description": "Twitter Username",
			  "required": true,
			  "type": "string"
			},
			{
			  "name": "limit",
			  "in": "query",
			  "description": "The maximum number of followers to return",
			  "required": false,
			  "type": "integer",
			  "format": "int32",
			  "default": 20
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Array of profiles a user has as followers",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Profile"
				}
			  }
			},
			"400": {
			  "description": "Invalid username or error fetching followers",
			  "schema": {
				"$ref": "#/definitions/ErrorResponse"
			  }
			}
		  }
		}
	  },
	  "/data/twitter/tweets/recent": {
  "post": {
    "description": "Retrieves recent tweets based on query parameters, supporting advanced search options",
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "tags": ["Twitter"],
    "summary": "Search recent tweets",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "description": "Search parameters",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search Query"
            },
            "count": {
              "type": "integer",
              "description": "Number of tweets to return",
              "default": 10
            }
          },
          "example": {
            "query": "#Bitcoin",
            "count": 10
          }
        },
        "examples": {
          "hashtag": {
            "summary": "Search by hashtag",
            "value": {"query": "#MasaNode", "count": 10}
          },
          "mention": {
            "summary": "Search by mention",
            "value": {"query": "@getmasafi", "count": 10}
          },
          "fromUser": {
            "summary": "Search tweets from a user",
            "value": {"query": "from:getmasafi", "count": 10}
          },
          "language": {
            "summary": "Search tweets in a specific language",
            "value": {"query": "Masa lang:en", "count": 10}
          },
          "dateRange": {
            "summary": "Search tweets within a date range",
            "value": {"query": "Masa since:2021-01-01 until:2021-12-31", "count": 10}
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "List of recent tweets",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tweet"
          }
        }
      },
      "400": {
        "description": "Invalid query or error fetching tweets",
        "schema": {
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    }
  }
},
	  "/data/discord/profile/{userID}": {
		"get": {
		  "description": "Retrieves a Discord user profile by user ID.",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "tags": ["Discord"],
		  "summary": "Search Discord Profile",
		  "parameters": [
			{
			  "name": "userID",
			  "in": "path",
			  "description": "Discord User ID",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successfully retrieved Discord user profile",
			  "schema": {
				"$ref": "#/definitions/UserProfile"
			  }
			},
			"400": {
			  "description": "Invalid user ID or error fetching profile",
			  "schema": {
				"$ref": "#/definitions/ErrorResponse"
			  }
			}
		  },
		  "security": [
			{
			  "Bearer": []
			}
		  ]
		}
	  },
	  "/data/discord/channels/{channelID}/messages": {
		"get": {
		  "description": "Retrieves messages from a specified Discord channel.",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "tags": ["Discord"],
		  "summary": "Get messages from a Discord channel",
		  "parameters": [
			{
			  "name": "channelID",
			  "in": "path",
			  "description": "Discord Channel ID",
			  "required": true,
			  "type": "string"
			},
			{
			  "name": "limit",
			  "in": "query",
			  "description": "The maximum number of messages to return",
			  "required": false,
			  "type": "integer",
			  "format": "int32"
			},
			{
			  "name": "before",
			  "in": "query",
			  "description": "A message ID to return messages posted before this message",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successfully retrieved messages from the Discord channel",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/ChannelMessage"
				}
			  }
			},
			"400": {
			  "description": "Invalid channel ID or error fetching messages",
			  "schema": {
				"$ref": "#/definitions/ErrorResponse"
			  }
			}
		  },
		  "security": [
			{
			  "Bearer": []
			}
		  ]
		}
	  },
	  "/data/discord/guilds/{guildID}/channels": {
		"get": {
		  "description": "Retrieves channels from a specified Discord guild.",
		  "tags": ["Discord"],
		  "summary": "Get channels from a Discord guild",
		  "parameters": [
			{
			  "name": "guildID",
			  "in": "path",
			  "description": "Discord Guild ID",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successfully retrieved channels from the Discord guild",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/GuildChannel"
				}
			  }
			},
			"400": {
			  "description": "Invalid guild ID or error fetching channels",
			  "schema": {
				"$ref": "#/definitions/ErrorResponse"
			  }
			}
		  },
		  "security": [
			{
			  "Bearer": []
			}
		  ]
		}
	  },
	  "/data/discord/user/guilds": {
		"get": {
		  "description": "Retrieves guilds from a specified Discord user.",
		  "tags": ["Discord"],
		  "summary": "Get guilds from a Discord user",
		  "responses": {
			"200": {
			  "description": "Successfully retrieved guilds from the Discord user",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/UserGuild"
				}
			  }
			},
			"400": {
			  "description": "Invalid user ID or error fetching guilds",
			  "schema": {
				"$ref": "#/definitions/ErrorResponse"
			  }
			}
		  },
		  "security": [
			{
			  "Bearer": []
			}
		  ]
		}
	  },
	  "/data/discord/guilds/all": {
		"get": {
		  "description": "Retrieves all guilds that all the Discord workers are apart of.",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "tags": ["Discord"],
		  "summary": "Get all guilds",
		  "responses": {
			"200": {
			  "description": "Successfully retrieved all guilds for the Discord user",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Guild"
				}
			  }
			},
			"400": {
			  "description": "Error fetching guilds or invalid access token",
			  "schema": {
				"$ref": "#/definitions/ErrorResponse"
			  }
			}
		  },
		  "security": [
			{
			  "Bearer": []
			}
		  ]
		}
	  }
	},
	"definitions": {
	  "UserProfile": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "username": {
			"type": "string"
		  },
		  "discriminator": {
			"type": "string"
		  },
		  "avatar": {
			"type": "string"
		  }
		}
	  },
	  "SuccessResponse": {
		"type": "object",
		"properties": {
		  "message": {
			"type": "string"
		  }
		}
	  },
	  "ErrorResponse": {
		"type": "object",
		"properties": {
		  "error": {
			"type": "string"
		  }
		}
	  },
	  "Tweet": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "text": {
			"type": "string"
		  },
		  "created_at": {
			"type": "string"
		  },
		  "user": {
			"type": "object",
			"properties": {
			  "id": {
				"type": "string"
			  },
			  "name": {
				"type": "string"
			  },
			  "screen_name": {
				"type": "string"
			  }
			}
		  }
		}
	  },
	  "ChannelMessage": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "channelID": {
			"type": "string"
		  },
		  "author": {
			"type": "object",
			"properties": {
			  "id": {
				"type": "string"
			  },
			  "username": {
				"type": "string"
			  },
			  "discriminator": {
				"type": "string"
			  },
			  "avatar": {
				"type": "string"
			  }
			}
		  },
		  "content": {
			"type": "string"
		  },
		  "timestamp": {
			"type": "string"
		  }
		}
	  },
	  "GuildChannel": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "guildID": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "type": {
			"type": "integer"
		  }
		}
	  },
	  "Guild": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "icon": {
			"type": "string"
		  },
		  "owner": {
			"type": "boolean"
		  },
		  "permissions": {
			"type": "string"
		  }
		}
	  },
	  "Trend": {
		"type": "object",
		"properties": {
		  "name": {
			"type": "string"
		  },
		  "url": {
			"type": "string"
		  },
		  "tweet_volume": {
			"type": "integer"
		  }
		}
	  },
	  "Profile": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "username": {
			"type": "string"
		  },
		  "discriminator": {
			"type": "string"
		  },
		  "avatar": {
			"type": "string"
		  }
		}
	  },
	  "UserGuild": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "icon": {
			"type": "string"
		  },
		  "owner": {
			"type": "boolean"
		  },
		  "permissions": {
			"type": "string"
		  }
		}
	  }
	}
  }`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.9-beta",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Masa Oracle API",
	Description:      "The Worlds Personal Data Network Masa Oracle Node API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
